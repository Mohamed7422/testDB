<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Work for Task</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        form {
            margin: 20px;
        }
        input, select, textarea {
            display: block;
            margin: 10px 0;
            padding: 10px;
            width: 100%;
            max-width: 400px;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Log Work for Task</h1>
    <form action="{% url 'log_work' %}" method="post">
        {% csrf_token %}
        
        <!-- Select Employee -->
        <label for="employee">Select Employee:</label>
        <select id="employee" name="employee_id" required>
            {% for employee in employees %}
            <option value="{{ employee.employee_id }}">{{ employee.first_name }} {{ employee.last_name }}</option>
            {% endfor %}
        </select>

        <!-- Select or Add Project -->
        <label for="project">Select Project:</label>
        <select id="project" name="project_id">
            <option value="">-- Select Project --</option>
            {% for project in projects %}
            <option value="{{ project.project_id }}">{{ project.project_name }}</option>
            {% endfor %}
        </select>
        <label for="new-project">Or Add New Project:</label>
        <input type="text" id="new-project" name="new_project_name" placeholder="Enter new project name">

        <!-- Select or Add Task -->
        <label for="task">Select Task:</label>
        <select id="task" name="task_id">
            <option value="">-- Select Task --</option>
            {% for task in tasks %}
            <option value="{{ task.task_id }}">{{ task.task_name }}</option>
            {% endfor %}
        </select>
        <label for="new-task">Or Add New Task:</label>
        <input type="text" id="new-task" name="new_task_name" placeholder="Enter new task name">

        <!-- Date Worked -->
        <label for="date">Date Worked:</label>
        <input type="date" id="date" name="date_worked" required>

        <!-- Hours Logged -->
        <label for="hours">Hours Logged:</label>
        <input type="number" id="hours" name="hours_logged" step="0.01" required>

        <!-- Overtime -->
        <label for="overtime">Is Overtime:</label>
        <select id="overtime" name="is_overtime" required>
            <option value="false">No</option>
            <option value="true">Yes</option>
        </select>

        <!-- Comments -->
        <label for="comments">Comments:</label>
        <textarea id="comments" name="comments" placeholder="Add comments here"></textarea>

        <input type="submit" value="Submit">
    </form>
</body>
</html>

-----------------------------
<!-- Ahmed Script-->
<script>
    let currentProjectId = '';
    let projectMap = {};
    let taskMap = {};

    window.onload = function() {
        loadProjects();
    }

    function loadProjects() {
        const projects = JSON.parse('{{ projects|safe }}');
        const projectSelect = document.getElementById('projectSelect');
        projectSelect.innerHTML = '<option value="">Choose project</option>';
        
        projectMap = {};
        projects.forEach(p => {
            projectMap[p.project_name] = p.project_id;
            const opt = document.createElement('option');
            opt.value = p.project_id;
            opt.textContent = p.project_name;
            projectSelect.appendChild(opt);
        });
    }

    function onProjectChange() {
        const projectSelect = document.getElementById('projectSelect');
        currentProjectId = projectSelect.value;
        loadTasksForProject(currentProjectId);
    }

    function loadTasksForProject(projectId) {
        if (!projectId) {
            const taskSelect = document.getElementById('taskSelect');
            taskSelect.innerHTML = '<option value="">Choose task</option>';
            return;
        }
        fetch(`/api/tasks/${projectId}/`)
            .then(response => response.json())
            .then(tasks => {
                const taskSelect = document.getElementById('taskSelect');
                taskSelect.innerHTML = '<option value="">Choose task</option>';
                taskMap = {};
                tasks.forEach(t => {
                    taskMap[t.task_name] = t.task_id;
                    const opt = document.createElement('option');
                    opt.value = t.task_id;
                    opt.textContent = t.task_name;
                    taskSelect.appendChild(opt);
                });
            });
    }

    function addTaskToTable() {
        const projectSelect = document.getElementById('projectSelect');
        const taskSelect = document.getElementById('taskSelect');
        const projectName = projectSelect.options[projectSelect.selectedIndex].text;
        const taskName = taskSelect.options[taskSelect.selectedIndex].text;

        const hoursInput = document.getElementById('hoursInput');
        const commentsInput = document.getElementById('commentsInput');
        const hours = hoursInput.value.trim();
        const comments = commentsInput.value.trim();

        if (!projectSelect.value || !taskSelect.value) {
            showMessage("Please select both project and task", "error");
            return;
        }
        if (!hours || isNaN(hours)) {
            showMessage("Please enter valid hours", "error");
            return;
        }

        const tbody = document.querySelector('#tasksTable tbody');
        const row = document.createElement('tr');
        row.className = 'task-row';
        row.innerHTML = `
            <td>${projectName}</td>
            <td>${taskName}</td>
            <td>${hours}</td>
            <td>${comments}</td>
            <td>
                <input type="checkbox" class="overtime-toggle" onchange="onOvertimeToggle(this)">
            </td>
            <td>
                <button class="btn btn-secondary" onclick="removeTaskRow(this)">
                    Remove
                </button>
            </td>
        `;

        row.dataset.projectId = projectSelect.value;
        row.dataset.taskId = taskSelect.value;
        tbody.appendChild(row);

        hoursInput.value = '';
        commentsInput.value = '';

        updateHoursCounter();
    }

    function onOvertimeToggle(checkbox) {
        updateHoursCounter();
        const {regularHours} = calculateHours();
        if (checkbox.checked && regularHours < 8) {
            showMessage("Overtime is typically logged after 8 regular hours", "warning");
        }
    }

    function removeTaskRow(btn) {
        const row = btn.closest('tr');
        row.remove();
        updateHoursCounter();
    }

    function calculateHours() {
        const rows = document.querySelectorAll('.task-row');
        let regularHours = 0;
        let overtimeHours = 0;
        rows.forEach(r => {
            const hrs = parseFloat(r.cells[2].textContent.trim());
            const overtimeToggle = r.querySelector('.overtime-toggle');
            if (overtimeToggle.checked) {
                overtimeHours += hrs;
            } else {
                regularHours += hrs;
            }
        });
        return {regularHours, overtimeHours};
    }

    function updateHoursCounter() {
        const {regularHours, overtimeHours} = calculateHours();
        document.getElementById('regularHours').textContent = regularHours.toFixed(1);
        document.getElementById('overtimeHours').textContent = overtimeHours.toFixed(1);
    }

    function submitEntries() {
        const dateWorked = document.getElementById('dateWorked').value;
        const rows = document.querySelectorAll('.task-row');
        const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;

        if (!dateWorked) {
            showMessage("Please select a date", "error");
            return;
        }

        if (rows.length === 0) {
            showMessage("Please add at least one task", "error");
            return;
        }

        let entries = Array.from(rows).map(row => ({
            date_worked: dateWorked,
            project_id: row.dataset.projectId,
            task_id: row.dataset.taskId,
            hours_logged: parseFloat(row.cells[2].textContent.trim()),
            is_overtime: row.querySelector('.overtime-toggle').checked,
            comments: row.cells[3].textContent.trim()
        }));

        fetch('/api/work-logs/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken
            },
            body: JSON.stringify(entries)
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                showMessage("Work logs submitted successfully!", "success");
                clearForm();
            } else {
                showMessage(data.message || "Error submitting work logs", "error");
            }
        })
        .catch(error => {
            showMessage("Error: " + error.message, "error");
        });
    }

    function showMessage(text, type) {
        const msgEl = document.getElementById('message');
        msgEl.textContent = text;
        msgEl.className = `message ${type} show`;
        setTimeout(() => {
            msgEl.className = 'message';
        }, 5000);
    }

    function clearForm() {
        document.getElementById('dateWorked').value = new Date().toISOString().slice(0,10);
        document.querySelector('#tasksTable tbody').innerHTML = '';
        document.getElementById('projectSelect').value = '';
        document.getElementById('taskSelect').innerHTML = '<option value="">Choose task</option>';
        document.getElementById('hoursInput').value = '';
        document.getElementById('commentsInput').value = '';
        updateHoursCounter();
    }

    function addNewTaskPrompt() {
        if (!currentProjectId) {
            showMessage("Please select a project first", "error");
            return;
        }
        const newTaskName = prompt("Enter new task name:");
        if (newTaskName?.trim()) {
            const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;
            fetch('/api/tasks/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                },
                body: JSON.stringify({
                    project_id: currentProjectId,
                    task_name: newTaskName.trim()
                })
            })
            .then(response => response.json())
            .then(task => {
                showMessage(`New task "${task.task_name}" added successfully`, "success");
                loadTasksForProject(currentProjectId);
            })
            .catch(error => {
                showMessage("Error adding task: " + error.message, "error");
            });
        }
    }
</script>
----------------------------------------------

<script>
    function fetchTasks() {
        const projectSelect = document.getElementById('projectSelect');
        const taskSelect = document.getElementById('taskSelect');
        const projectId = projectSelect.value;

        // Clear the tasks dropdown
        taskSelect.innerHTML = '<option value="">Select task</option>';

        if (projectId) {
            console.log("Selected project ID:", projectId);

            // Make an AJAX request to fetch tasks for the selected project
            fetch(`/employee/get_tasks/?project_id=${projectId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Populate the tasks dropdown
                    data.forEach(task => {
                        const option = document.createElement('option');
                        option.value = task.task_id;
                        option.textContent = task.task_name;
                        taskSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching tasks:', error);
                });
        }
    }
</script>